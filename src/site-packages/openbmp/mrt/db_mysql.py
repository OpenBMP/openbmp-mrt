"""
  Copyright (c) 2013-2016 Cisco Systems, Inc. and others.  All rights reserved.

  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at http://www.eclipse.org/legal/epl-v10.html

  .. moduleauthor:: Tim Evens <tievens@cisco.com>
"""
import mysql.connector as mysql
from time import time


class DbMySQL:
    """ Database mysqls class

        This class handles the database access methods.
    """
    #: Connection handle
    conn = None

    #: Cursor handle
    cursor = None

    #: Last query time in seconds (floating point)
    last_query_time = 0

    def __init__(self, log, user, pw, host, database):
        """ Constructor

            :param log:         Existing logger to use for logging
            :param user:        MySQL username
            :param pw:          MySQL password
            :param host:        MySQL host/ip
            :param database:    MySQL database name
        """
        self.LOG = log
        self._isConnected = False
        self._user = user
        self._pw = pw
        self._host = host
        self._dbname = database

        self.connectDb()
        self.sequence_start = 0

    def connectDb(self):
        """
         Connect to database
        """
        try:
            self.conn = mysql.connect(user=self._user, password=self._pw,
                                      host=self._host,
                                      database=self._dbname)

            self.cursor = self.conn.cursor(raw=True)
            self._isConnected = True

        except mysql.Error as err:
            if err.errno == mysql.errorcode.ER_ACCESS_DENIED_ERROR:
                self.LOG.error("Incorrect username/password")

            elif err.errno == mysql.errorcode.ER_BAD_DB_ERROR:
                self.LOG.error("Database does not exists")

            else:
                self.LOG.error("ERROR: Connect failed: " + str(err))
                raise err

    def close(self):
        """ Close the database connection """
        if self.cursor:
            self.cursor.close()
            self.cursor = None

        if self.conn:
            self.conn.close()
            self.conn = None

    def query(self, query, queryParams=None):
        """ Run a query and return the result set back

            :param query:        The query to run - should be a working SELECT statement
            :param queryParams:  Dictionary of parameters to supply to the query for
                                 variable substitution

            :return: Returns "None" if error, otherwise array list
        """
        if not self.cursor or not self._isConnected:
            self.LOG.error("MySQL is not connected, trying to reconnect")
            self.connectDb()
            return None

        try:
            startTime = time()

            if queryParams:
                self.cursor.execute(query % queryParams)
            else:
                self.cursor.execute(query)

            self.last_query_time = time() - startTime

            rows = []

            while True:
                result = self.cursor.fetchmany(size=5000)
                if len(result) > 0:
                    rows += result
                else:
                    break

            return rows

        except mysql.Error as err:
            self.LOG.error("query failed - " + str(err))
            return None

    def query_cb(self, query, queryParams=None, callback=None, *callback_args):
        """ Run a query and call the callback for each fetched row set

            :param query:        The query to run - should be a working SELECT statement
            :param queryParams:  Dictionary of parameters to supply to the query for
                                 variable substitution
            :param callback:     Function to call with the result set of query
                                    callback_function(rows, sequence_start, *args)
            :param callback_args: Additional callback args

            :return: Returns True if error, False otherwise
        """
        if not callback:
            self.LOG.error("Callback not set, cannot run query with callback");
            return True

        if not self.cursor or not self._isConnected:
            self.LOG.error("MySQL is not connected, trying to reconnect")
            self.close()
            self.connectDb()
            return True

        try:
            if queryParams:
                self.cursor.execute(query % queryParams)
            else:
                self.cursor.execute(query)

            while True:
                rows = self.cursor.fetchmany(size=150000)
                if len(rows) > 0:
                    callback(rows, self.sequence_start, *callback_args)
                    self.sequence_start += len(rows)
                else:
                    break

        except mysql.Error as err:
            self.LOG.error("query failed - " + str(err))

            if 'system error' in str(err):
                self.close()
                self.connectDb()

            return True

        return False

    def isConnected(self):
        """ Checks if mysql is connected or not
        :return: True if connected, False if not connected
        """
        return self._isConnected