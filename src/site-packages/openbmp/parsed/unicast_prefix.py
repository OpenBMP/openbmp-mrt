"""openbmp.parsed.unicast_prefix class

  Copyright (c) 2013-2016 Cisco Systems, Inc. and others.  All rights reserved.
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at http://www.eclipse.org/legal/epl-v10.html

  .. moduleauthor:: Tim Evens <tievens@cisco.com>
"""

class unicast_prefix:
    """ Format class for unicast prefix parsed messages

        Schema Version: 1

        This class parses the TSV so that fields can be used by name

    """
    VALUES = []
    FIELD_COUNT = 27

    def __init__(self):
        """ Constructor
        """
        pass

    def parse(self, row):
        """ Parses the row in TSV format

        :param row:     TSV row to be parsed and loaded into class

        :raise: NameError with error message on error
        """
        self.VALUES = row.split('\t')

        if len(self.VALUES) != self.FIELD_COUNT:
            raise NameError("Invalid field length of %d, expected %d" % (len(self.VALUES), self.FIELD_COUNT))

    def getAction(self):
        return self.VALUES[0]

    def getSeqence(self):
        return int(self.VALUES[1])

    def getHashId(self):
        return self.VALUES[2]

    def getRouterHashId(self):
        return self.VALUES[3]

    def getRouterIp(self):
        return self.VALUES[4]

    def getBaseAttrHashId(self):
        return self.VALUES[5]

    def getPeerHashId(self):
        return self.VALUES[6]

    def getPeerIp(self):
        return self.VALUES[7]

    def getPeerAsn(self):
        try:
            return int(self.VALUES[8])
        except:
            return 0

    def getTimestamp(self):
        return self.VALUES[9]

    def getPrefixIp(self):
        return self.VALUES[10]

    def getPrefixLength(self):
        try:
            return int(self.VALUES[11])
        except:
            return 0

    def getPrefix(self):
        return self.getPrefixIp() + '/' + str(self.getPrefixLength())

    def isIPv4(self):
        return True if self.VALUES[12] == '1' else False

    def getOrigin(self):
        return self.VALUES[13]

    def getAsPath(self):
        return self.VALUES[14]

    def getAsPathCount(self):
        try:
            return int(self.VALUES[15])
        except:
            return 0

    def getOriginAs(self):
        try:
            return int(self.VALUES[16])
        except:
            return 0

    def getNexthop(self):
        return self.VALUES[17]

    def getMed(self):
        try:
            return int(self.VALUES[18])
        except:
            return 0

    def getLocalPref(self):
        try:
            return int(self.VALUES[19])
        except:
            return 0

    def getAggregator(self):
        return self.VALUES[20]

    def getCommunityList(self):
        return self.VALUES[21]

    def getExtCommunityList(self):
        return self.VALUES[22]

    def getClusterList(self):
        return self.VALUES[23]

    def isAtomicAggregate(self):
        return True if self.VALUES[24] == '1' else False


    def isNexthopIPv4(self):
        return True if self.VALUES[25] == '1' else False


    def getOriginatorId(self):
        return self.VALUES[26]

