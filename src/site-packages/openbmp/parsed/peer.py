"""openbmp.parsed.peer class

  Copyright (c) 2013-2016 Cisco Systems, Inc. and others.  All rights reserved.
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at http://www.eclipse.org/legal/epl-v10.html

  .. moduleauthor:: Tim Evens <tievens@cisco.com>
"""

class peer:
    """ Format class for peer parsed messages

        Schema Version: 1

        This class parses the TSV so that fields can be used by name

    """
    VALUES = []
    FIELD_COUNT = 28

    def __init__(self):
        """ Constructor
        """
        pass

    def parse(self, row):
        """ Parses the row in TSV format

        :param row:     TSV row to be parsed and loaded into class

        :raise: NameError with error message on error
        """
        self.VALUES = row.split('\t')

        if len(self.VALUES) != self.FIELD_COUNT:
            raise NameError("Invalid field length of %d, expected %d" % (len(self.VALUES), self.FIELD_COUNT))

    def getAction(self):
        return self.VALUES[0]

    def getSeqence(self):
        return int(self.VALUES[1])

    def getHashId(self):
        return self.VALUES[2]

    def getRouterHashId(self):
        return self.VALUES[3]

    def getName(self):
        return self.VALUES[4]

    def getRemoteBgpId(self):
        return self.VALUES[5]

    def getRouterIp(self):
        return self.VALUES[6]

    def getTimestamp(self):
        return self.VALUES[7]

    def getRemoteAsn(self):
        try:
            return int(self.VALUES[8])
        except:
            return 0

    def getRemoteIp(self):
        return self.VALUES[9]

    def getPeerRd(self):
        return self.VALUES[10]

    def getRemotePort(self):
        try:
            return int(self.VALUES[11])
        except:
            return 0

    def getLocalAsn(self):
        try:
            return int(self.VALUES[12])
        except:
            return 0

    def getLocalIp(self):
        return self.VALUES[13]

    def getLocalPort(self):
        try:
            return int(self.VALUES[14])
        except:
            return 0

    def getLocalBgpId(self):
        return self.VALUES[15]

    def getInfoData(self):
        return self.VALUES[16]

    def getAdvCapabilities(self):
        return self.VALUES[17].split(',')

    def getRecvCapabilities(self):
        return self.VALUES[18].split(',')

    def getRemoteHolddown(self):
        try:
            return int(self.VALUES[19])
        except:
            return 0

    def getAdvHolddown(self):
        try:
            return int(self.VALUES[20])
        except:
            return 0

    def getBmpReasonCode(self):
        try:
            return int(self.VALUES[21])
        except:
            return 0

    def getBgpErrorCode(self):
        try:
            return int(self.VALUES[22])
        except:
            return 0

    def getBgpSubErrorCode(self):
        try:
            return int(self.VALUES[23])
        except:
            return 0

    def getErrorText(self):
        return self.VALUES[24]

    def isL3Vpn(self):
        return True if self.VALUES[25] == '1' else False

    def isPrePolicy(self):
        return True if self.VALUES[26] == '1' else False

    def isIPv4(self):
        return True if self.VALUES[27] == '1' else False
